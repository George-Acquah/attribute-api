generator client {
  provider      = "prisma-client-js"
  output        = "../../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InteractionType {
  SCAN
  PAGE_VIEW
  SIGNUP
  PURCHASE
  CUSTOM
}

enum ConversionType {
  SIGNUP
  PURCHASE
  DOWNLOAD
  BOOKING
  CUSTOM
}

model User {
  id           String        @id @default(cuid())
  uid          String        @unique
  email        String?       @unique
  phone        String?       @map("phone_number")
  name         String?
  img          String?
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt    DateTime?     @map("deleted_at") @db.Timestamptz(6)
  campaigns    Campaign[]    @relation("OwnerCampaigns")
  interactions Interaction[]
  roles        UserRole[]
  conversions  Conversion[]

  @@index([email])
  @@map("users")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  users       UserRole[]

  @@map("roles")
}

model UserRole {
  roleId String
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

//Report - Look out for location as well

model Campaign {
  id        String    @id @default(cuid())
  name      String
  descrpition String? @default("")
  budget Float?  @default(0)
  target  Json?
  medium        String     @map("type")
  actions String[]  @default(["SIGNUP", "PURCHASE", "DOWNLOAD"])
  channel   String    @default("QR")
  ownerId   String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  endDate DateTime  @default(now()) @map("end_date") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  owner     User      @relation("OwnerCampaigns", fields: [ownerId], references: [id])
  codes     Code[]

  @@map("campaigns")
}

model Code {
  id           String        @id @default(cuid())
  code         String        @unique
  campaignId   String
  qrUrl        String?
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt    DateTime?     @map("deleted_at") @db.Timestamptz(6)
  campaign     Campaign      @relation(fields: [campaignId], references: [id])
  interactions Interaction[]

  @@map("codes")
}

model Interaction {
  id          String          @id @default(cuid())
  userId      String?
  codeId      String
  type        InteractionType
  phoneNumber String?
  email Json? 
  metadata    Json?
  fingerprint String?
  timestamp   DateTime        @default(now()) @map("timestamp") @db.Timestamptz(6)
  code        Code            @relation(fields: [codeId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])

  conversionLinks ConversionInteraction[]

  @@map("interactions")
}

model Conversion {
  id           String                  @id @default(cuid())
  userId       String?
  type         ConversionType
  value        Float?
  timestamp    DateTime                @default(now()) @db.Timestamptz(6)
  user         User?                   @relation(fields: [userId], references: [id])
  interactions ConversionInteraction[]

  @@map("conversions")
}

model ConversionInteraction {
  conversionId  String
  interactionId String
  conversion    Conversion  @relation(fields: [conversionId], references: [id])
  interaction   Interaction @relation(fields: [interactionId], references: [id])

  @@id([conversionId, interactionId])
  @@map("conversion_interactions")
}


