generator client {
  provider      = "prisma-client-js"
  output        = "../../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================
// ENUMS
// ======================
enum InteractionType {
  SCAN
  PAGE_VIEW
  SIGNUP
  PURCHASE
  CUSTOM
}

enum ConversionType {
  SIGNUP
  PURCHASE
  DOWNLOAD
  BOOKING
  CUSTOM
}

enum CampaignStatusType {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum CodeType {
  QR
  BARCODE
  USSD
  SMS
  REFERRAL
}

// ======================
// AUTHENTICATION MODELS
// ======================
model User {
  id           String    @id @default(cuid())
  uid          String?   @unique
  email        String?   @unique
  phone        String?   @map("phone_number")
  name         String?
  avatarUrl    String?   @map("img")
  passwordHash String?   @map("password_hash")
  isBanned     Boolean?  @default(false) @map("is_banned")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)

  // Relations
  campaigns           Campaign[]           @relation("OwnerCampaigns")
  interactions        Interaction[]
  roles               UserRole[]
  conversions         Conversion[]
  adminLogs           AdminLog[]
  blockedFingerprints BlockedFingerprint[]
  authProviders       UserAuthProvider[]

  @@index([email])
  @@index([phone])
  @@map("users")
}

model Influencer {
  id                String             @id @default(cuid())
  name              String
  handle            String?            @unique
  campaigns         Campaign[]
  influencerMetrics InfluencerMetric[]
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  users       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  id         String   @id @default(cuid())
  action     String
  subject    String
  // optional JSON conditions object, e.g. { "ownerId": "$user.id" }
  conditions Json?    

  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])

  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([roleId, action, subject], name: "roleId_action_subject")
  @@index([roleId])
  @@map("role_permissions")
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

// ======================
// CAMPAIGN MODELS
// ======================
model Campaign {
  id          String             @id @default(cuid())
  name        String
  description String?            @default("")
  budget      Float?             @default(0)
  target      Json?
  medium      String             @map("type")
  //actions     String[]           @default(["SIGNUP", "PURCHASE", "DOWNLOAD"])
  actions     ConversionType[]   @default([SIGNUP, PURCHASE, DOWNLOAD])
  webhookUrl  String?
  status      CampaignStatusType @default(DRAFT)

  // Foreign keys
  channelId    String
  ownerId      String
  regionId     String
  influencerId String?

  // Timestamps
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  startDate  DateTime  @default(now()) @map("start_date") @db.Timestamptz(6)
  endDate    DateTime  @default(now()) @map("end_date") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  archivedAt DateTime? @map("archived_at") @db.Timestamptz(6)

  // Relations
  channel           Channel            @relation(fields: [channelId], references: [id])
  owner             User               @relation("OwnerCampaigns", fields: [ownerId], references: [id])
  codes             Code[]
  geoLifts          GeoLift[]
  funnelSteps       FunnelStep[]
  region            Region             @relation(fields: [regionId], references: [id])
  reportLogs        ReportLog[]
  influencers       Influencer?        @relation(fields: [influencerId], references: [id])
  influencerMetrics InfluencerMetric[]

  @@index([channelId, ownerId, regionId, createdAt])
  @@map("campaigns")
}

model Channel {
  id        String     @id @default(cuid())
  name      String     @unique
  campaigns Campaign[]

  @@map("channels")
}

// ======================
// GEOGRAPHICAL MODELS
// ======================
model Country {
  id      String   @id @default(cuid())
  name    String   @unique
  code    String?  @unique // Adding country code (e.g., "US", "GB")
  regions Region[]

  @@map("countries")
}

model Region {
  id        String     @id @default(cuid())
  name      String
  countryId String
  country   Country    @relation(fields: [countryId], references: [id])
  campaigns Campaign[]
  geoLifts  GeoLift[]

  @@unique([name, countryId])
  @@index([countryId])
  @@map("regions")
}

// ======================
// TRACKING MODELS
// ======================
model Code {
  id         String   @id @default(cuid())
  code       String   @unique
  campaignId String
  qrUrl      String?
  type       CodeType @default(QR)

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  // Relations
  campaign     Campaign      @relation(fields: [campaignId], references: [id])
  interactions Interaction[]

  @@index([campaignId])
  @@map("codes")
}

model GeoLift {
  id         String @id @default(cuid())
  upliftPct  Float
  keyDriver  String
  campaignId String
  regionId   String

  // Relations
  region   Region   @relation(fields: [regionId], references: [id])
  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@unique([campaignId, regionId])
  @@index([campaignId, regionId])
  @@map("geo_lifts")
}

model FunnelStep {
  id           String        @id @default(uuid())
  name         String        @map("step") // Renamed for clarity
  order        Int
  campaignId   String
  campaign     Campaign      @relation(fields: [campaignId], references: [id])
  interactions Interaction[]

  @@unique([campaignId, order])
  @@index([campaignId])
  @@map("funnel_steps")
}

model InfluencerMetric {
  id           String     @id @default(cuid())
  influencerId String
  campaignId   String
  impressions  Int
  clicks       Int
  engagement   Float
  createdAt    DateTime   @default(now())
  influencer   Influencer @relation(fields: [influencerId], references: [id])
  campaign     Campaign   @relation(fields: [campaignId], references: [id])
}

// ======================
// INTERACTION MODELS
// ======================
model Interaction {
  id          String          @id @default(cuid())
  type        InteractionType
  fingerprint String?

  // User information
  userId       String?
  phoneNumber  String?
  email        String?
  userMetadata Json?

  // Tracking core
  codeId       String
  funnelStepId String?
  timestamp    DateTime @default(now()) @map("timestamp") @db.Timestamptz(6)

  // Extended tracking (for attribution & analytics)
  source       String? // e.g., utm_source = google, facebook, influencer123
  medium       String? // e.g., utm_medium = cpc, email, referral
  campaignName String? // e.g., utm_campaign = spring_sale
  referrer     String? // e.g., https://example.com/page
  device       String? // e.g., mobile, desktop, tablet
  location     String? // optional fallback if no GeoLift
  metadata     Json? // free-form tracking data

  // Relations
  code            Code                    @relation(fields: [codeId], references: [id])
  user            User?                   @relation(fields: [userId], references: [id])
  funnelStep      FunnelStep?             @relation(fields: [funnelStepId], references: [id])
  conversionLinks ConversionInteraction[]

  @@index([userId, codeId, timestamp])
  @@index([fingerprint])
  @@index([source])
  @@index([medium])
  @@map("interactions")
}

model Conversion {
  id          String         @id @default(cuid())
  type        ConversionType
  value       Float?
  fingerprint String
  timestamp   DateTime       @default(now()) @db.Timestamptz(6)

  // User reference
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Relations
  interactions ConversionInteraction[]

  @@index([userId, timestamp])
  @@index([fingerprint])
  @@map("conversions")
}

model ConversionInteraction {
  conversionId  String
  interactionId String
  conversion    Conversion  @relation(fields: [conversionId], references: [id])
  interaction   Interaction @relation(fields: [interactionId], references: [id])

  @@id([conversionId, interactionId])
  @@index([interactionId])
  @@map("conversion_interactions")
}

model BlockedFingerprint {
  id          String    @id @default(cuid())
  fingerprint String    @unique
  reason      String?
  blockedById String?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  blockedBy   User?     @relation(fields: [blockedById], references: [id])

  @@map("blocked_fingerprints")
}

// ======================
// AUDITING MODELS
// ======================
model ReportLog {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  filePath   String   @map("file_path")
  fileName   String   @map("file_name")
  status     String // 'success' | 'failed'
  error      String?
  retryCount Int      @default(0)
  userId     String? // Nullable for scheduled jobs

  @@map("report_logs")
}

model AdminLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  entityType String
  entityId   String?
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  //relation
  admin User @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@map("admin_logs")
}

model UserAuthProvider {
  id         String   @id @default(cuid())
  provider   String
  providerId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([provider, providerId])
  @@map("user_auth_providers")
}
